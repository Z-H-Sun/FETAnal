#!/usr/bin/env python
# encoding: UTF-8
# dependencies: python >= 2.7, numpy >= 1.8, matplotlib >= 1.3 (had better >= 2.0), xlrd >= 1.0

from __future__ import print_function
import os
import time
import warnings
import numpy
from matplotlib.pyplot import *
import xlrd

# preparatory work
print('\033]0;FET Analyser v1.04 by Z. Sun\a')
warnings.simplefilter('ignore', np.RankWarning) # turn off polyfit warnings
warnings.simplefilter('ignore', UserWarning) # turn off matplotlib/font-not-found warnings
thisDir = os.path.abspath(os.path.dirname(sys.argv[0])) # where this script locates

try: f = open(os.path.join(thisDir, 'Config.ini')); exec(f.read()); f.close() # definitions
except: print('Config file missing or damaged.'); os._exit(-1)

autowl = (W == 0 or L == 0) # read W & L in filenames
if DIELECTRIC < 0:
    cp = DCP
else:
    cp = 8.854e-7*EPS[DIELECTRIC]/TD[DIELECTRIC] # [F/cm^2] Capacitance of the channel per surface area
if DIELECTRIC == 2: # For BCB, serial connection
    cp0 = 8.854e-7*EPS[0]/TD[0]
    cp = cp*cp0/(cp+cp0)

if len(sys.argv) == 1:
    print('Enter "-config" or .xls files or their path here (drag-drop supported): ', end='')
    os.system('"' + sys.argv[0] + '" ' + raw_input().strip())
    os._exit(0)
if sys.argv[1].lower() == "-config":
    os.chdir(thisDir)
    os.system('vi config.ini'); os._exit(0)

print('\nPlease check the following parameters:\nCapacitance [F/cm^2]\tW/L [μm]\tCol # of V_gs/√I_d')
print("\t%.2E\t%d/%d\t\t%d/%d" % (cp, W, L, ColGateV, ColIDrain))

if os.path.isdir(sys.argv[1]): # judge whether the input is path or files array
    path = sys.argv[1]
    files = os.listdir(sys.argv[1])
else:
    path = os.path.dirname(sys.argv[1])
    files = sys.argv[1:]

try:
    os.chdir(path)
    if not os.path.exists('Results'): os.mkdir('Results')
except: print("Path not applicable."); os._exit(-1)


def savitzky_golay(y): # Smooth data with a Savitzky-Golay filter (in fact incorporated in scipy.signal)
    global half
    if WINDOWLEN % 2 != 1 or WINDOWLEN < 1:
        raise TypeError("window_size size must be a positive odd number")
    if WINDOWLEN < POLYORDER + 2:
        raise TypeError("window_size is too small for the polynomials order")
    order_range = range(POLYORDER+1)
    half = (WINDOWLEN-1) // 2
    # precompute coefficients
    b = numpy.mat([[k**i for i in order_range] for k in range(-half, half+1)])
    m = numpy.linalg.pinv(b).A[0]
    # pad the signal at the extremes with values taken from the signal itself
    firstvals = y[0] - numpy.abs([x - y[0] for x in y[1:half+1][::-1]])
    lastvals = y[-1] + numpy.abs([x - y[-1] for x in y[-half-1:-1][::-1]])
    y = numpy.concatenate((firstvals, y, lastvals))
    return numpy.convolve(m[::-1], y, mode='valid')

colors = [(.122, .467, .706, 1.), (.839, .153, .157, 1.)] # blue, red
def plot_sp():
    global pic
    fig.clear()
    ax1 = gca()
    title(('# %02d: ' % (pic+1)) + results[pic][0])
    xlabel(r'$V_{\rm{gs}}\ /\ \rm{V}$', fontsize=16)
    ylabel(r'$\sqrt{I_{\rm{ds}}}\ /\ \rm{\mu A}^{1/2}$', fontsize=16)
    ax2 = twinx()
    ax2.set_ylabel(r'$\mu\ /\ (\rm{cm^2\ V^{-1}\ s^{-1}})$', fontsize=16, alpha=0.6)
    ax2.tick_params(axis='y', colors='.6')
    ax1.grid(True, linestyle='dashed')
    
    for i in [0, 1]:
        ax1.plot(results[pic][1][i], [x*1e3 for x in results[pic][3][i]], color=colors[i], label=['Forward', 'Backward'][i]) # smoothed tranfer curve
        ax1.plot(results[pic][1][i], [x*1e3 for x in results[pic][2][i]], color=colors[i], alpha=.6, marker='s', markersize=4, linewidth=0) # original transfer curve
        ax2.plot(results[pic][1][i][half:-half], results[pic][4][i][0]**2*2*L/W/cp, color=colors[i], alpha=.6, marker='+', linewidth=0) # plot mobility against Vgs
    
    ymax = ax1.get_ylim()[1]
    for i in [0, 1]: # result of linear fitting
        sl = 1/results[pic][5][i][0]
        intc = -results[pic][5][i][1]/results[pic][5][i][0]
        ax1.plot([intc, sl*ymax/1e3+intc], [0, ymax], linestyle='dashed', color=colors[i], alpha=.6)
        if i == 0: ax1.set_xlim(min(min(results[pic][1][0]), intc), max(max(results[pic][1][0]), intc))
    ax1.set_ylim(0, ymax)
    ymax = ax2.get_ylim()[1]
    ax2.set_ylim(0, ymax*1.2)
    ax2.yaxis.get_major_formatter().set_powerlimits((0,1))
    ax1.legend() # loc=1

def on_scroll(event):
    global pic
    if event.button == 'up':
        pic -= 1
    elif event.button == 'down':
        pic += 1
    if pic == len(results): pic = 0
    if pic < 0: pic = len(results)-1
    fstr = results[pic][0]
    fstr = fstr+' '*(25-len(fstr)) if len(fstr) < 25 else fstr[:22]+'...'
    print(('\rPlotting data for # %02d: ' % (pic+1)) + fstr, end='')
    event.canvas.figure.clear()
    plot_sp() # plot the previous/next figure
    event.canvas.draw()
    
fl = open('Results/Results_' + time.strftime('%m%d%y_%H%M%S') + '.csv', 'w')
fd = open('Results/Data_' + time.strftime('%m%d%y_%H%M%S') + '.csv', 'w')
print('\nName\t\t\tμ_f [cm^2 / (V s)]\tV_thf [V]\tμ_b [cm^2 / (V s)]\tV_thb [V]\tI_On/I_Off')
fl.write('Entry,Name,\\mu_f[cm^2/(V s)],V_thf[V],\\mu_b[cm^2/(V s)],V_thb[V],I_On/I_Off\n')
results = []

fig = figure(figsize=(8, 5))
fig.canvas.mpl_connect('scroll_event', on_scroll)
rc('font', family='Arial', size=12)
rc('mathtext', fontset='cm')
pic = -1 # index of figure

for i in files:
    fn = os.path.splitext(os.path.basename(i))
    if fn[1][:4]!=".xls": continue
    print('%02d'%(pic+2), end=' ')
    print(fn[0]+' '*(25-len(fn[0])) if len(fn[0]) < 25 else fn[0][:22]+'...', end='') # when the filename is too long
    fl.write(str(pic+2)+','+fn[0]+',')
    fd.write(fn[0]+',#'+str(pic+2)+'\nV_g[V],')
    if autowl:
        import re
        try: W, L = map(int, re.findall(r'\d+(?=[-_\s]*.?m)', fn[0], flags=re.I))
        # acceptable versions: 100um, 1mm, 50 um, 50-um, 50_um, etc.
        except: print('Bad filename.'); fl.write('\n'); fd.write('\n'); continue

    try:
        wb = xlrd.open_workbook(i, logfile=open(os.devnull, 'w'), on_demand = False)
        # set logfile to `null` to depress warnings
        # in fact, `on_demand` is not supported for .xls documents (with BIFF<5.0)
        sheet = wb.sheet_by_name('Data') # wb.sheet_by_index(0)
        headers = sheet.row_values(0)
        _ColGateV, _ColIDrain = ColGateV-1, ColIDrain-1 # start counting from 0
        if ColGateV == 0:
            try: _ColGateV = headers.index('GateV')
            except: print('Bad column header name.'); fl.write('\n'); fd.write('\n'); continue
        if ColIDrain == 0:
            try: _ColIDrain = headers.index('IDRAIN')
            except:
                try: _ColIDrain = headers.index('IDLIN')
                except: print('Bad column header name.'); fl.write('\n'); fd.write('\n'); continue

        gatev = sheet.col_values(_ColGateV, start_rowx=1, end_rowx=None)
        nscan = len(gatev)//2 # forward/backward
        gatev = [gatev[:nscan], gatev[:nscan-1:-1]] # flipping the backward sequence is beneficial
        fd.write(','.join(numpy.array(gatev, dtype=str).flatten()))
        fd.write('\n\\sqrt I_d(smoothed)[A],')
        idlin = sheet.col_values(_ColIDrain, start_rowx=1, end_rowx=None) # sqrt(Ids)
        idlin = [idlin[:nscan], idlin[:nscan-1:-1]]
        idsg = [0, 0] # smoothed value of sqrt(Ids)
        diff = [[], []] # consist of [slope, intercept] arrays
        maxs = [[0, 0], [0, 0]] # [slope, intercept] when abs(slope) reaches a maximum
        for j in [0, 1]:
            idsg[j] = savitzky_golay(idlin[j]) # smooth the curve
            for k in range(half, nscan-half): # linear fit using every WINDOWLEN points
                polyp = numpy.polyfit(gatev[j][k-half:k+half+1], idsg[j][k-half:k+half+1], 1)
                diff[j].append(polyp)
            diff[j] = numpy.array(diff[j]).T
            maxs[j] = diff[j][:, numpy.argmax(abs(diff[j][0]))]
            mobility = '%.2E' % (maxs[j][0]**2*2*L/W/cp)
            print(mobility, end='\t\t')
            fl.write(mobility+',')
            vth = '%.2f' % (-maxs[j][1]/maxs[j][0]) # threshold voltage
            print(vth, end='\t\t')
            fl.write(vth+',')

        fd.write(','.join(numpy.array(idsg, dtype=str).flatten()))
        fd.write('\n\\mu[cm^2/(V s)],')
        for k in [0, 1]:
            fd.write('N/A,'*half+','.join(numpy.array(diff[k][0]**2*2*L/W/cp, dtype=str))+',N/A'*half+',')
        for j in [0, 1]: # 0=slope, 1=intercept
            fd.write('\n%s,'%['slope', 'intercept'][j])
            for k in [0, 1]: # 0=forward, 1=backward
                fd.write('N/A,'*half+','.join(numpy.array(diff[k][j], dtype=str))+',N/A'*half+',')
        fd.write('\n\n')

        ionoff = (idsg[0][-1]/idsg[0][0])**2 # Ion/Ioff
        if ionoff < 1: ionoff = 1/ionoff # if Vgs was scanned from off to on!
        print('%.2E' % ionoff)
        fl.write('%.2E\n' % ionoff)
    except Exception as e:
        print(repr(e))
        fl.write(repr(e)+'\n')
        fd.write(repr(e)+'\n')
        continue

    pic += 1
    results.append((fn[0], gatev, idlin, idsg, diff, maxs)) # record results
    plot_sp()
    subplots_adjust(left=.11, right=.92, top=.95, bottom=.12)
    savefig('Results/' + fn[0] + PICEXT)

print('\nResults (.csv and ' + PICEXT + ' files) were saved at: %s.' % os.path.abspath('Results'))
fl.close()
fd.close()
print('\nPlotting data for the last file.\nPlease scroll to move to the previous/next figure.\n')
show()
os._exit(0)
